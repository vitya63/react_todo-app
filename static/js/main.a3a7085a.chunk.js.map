{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","components/ClearBtn.js","components/ControlPanel.js","components/TodoApp.js","App.js","index.js"],"names":["TodoInput","state","title","handleTitleChange","event","_this","setState","target","value","addTodo","e","which","keyCode","props","addTodoItem","react_default","a","createElement","className","placeholder","onChange","this","onKeyPress","React","Component","TodoItem","_ref","item","toggleOne","clearItem","completed","type","id","checked","htmlFor","onClick","TodoList","items","toggleAll","selectedTab","filteredItems","Object","toConsumableArray","filter","length","Fragment","style","display","map","components_TodoItem","key","ClearBtn","clearCompleted","some","ControlPanel","handleFilter","href","components_ClearBtn","TodoApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todo","prevState","todos","concat","eTargetId","_objectSpread","every","document","querySelector","tab","tabName","innerText","components_TodoInput","components_TodoList","components_ControlPanel","App","components_TodoApp","ReactDOM","render","src_App","getElementById"],"mappings":"iRA6CeA,6MAzCbC,MAAQ,CACNC,MAAO,MAGTC,kBAAoB,SAACC,GACnBC,EAAKC,SAAS,CACZJ,MAAOE,EAAMG,OAAOC,WAIxBC,QAAU,SAACC,GACO,KAAZA,EAAEC,OAA8B,KAAdD,EAAEE,SACG,KAArBP,EAAKJ,MAAMC,QACbG,EAAKQ,MAAMC,YAAYT,EAAKJ,MAAMC,OAClCG,EAAKC,SAAS,CACZJ,MAAO,+EAOb,OACEa,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVC,YAAY,yBACZC,SAAUC,KAAKlB,kBACfmB,WAAYD,KAAKZ,QACjBD,MAAOa,KAAKpB,MAAMC,gBA/BJqB,IAAMC,WCiCfC,MAjCf,SAAAC,GAAkD,IAA9BC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,UACnC,OACEd,EAAAC,EAAAC,cAAA,MAAIC,UAAWS,EAAKG,UAAY,YAAc,IAC5Cf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEc,KAAK,WACLb,UAAU,SACVc,GAAIL,EAAKK,GACTZ,SAAUQ,EACVK,QAASN,EAAKG,YAEhBf,EAAAC,EAAAC,cAAA,SAAOiB,QAAQ,UAAUP,EAAKzB,OAC9Ba,EAAAC,EAAAC,cAAA,UACEc,KAAK,SACLC,GAAIL,EAAKK,GACTG,QAASN,EACTX,UAAU,eC2CLkB,MA1Df,SAAAV,GAQE,IANEW,EAMFX,EANEW,MACAT,EAKFF,EALEE,UACAU,EAIFZ,EAJEY,UACAC,EAGFb,EAHEa,YACAV,EAEFH,EAFEG,UAGEW,EAAgB,GAYpB,MAVoB,QAAhBD,EACFC,EAAaC,OAAAC,EAAA,EAAAD,CAAOJ,GACK,WAAhBE,EACTC,EAAgBC,OAAAC,EAAA,EAAAD,CAAIJ,GACjBM,OAAO,SAAAhB,GAAI,OAAKA,EAAKG,YACC,cAAhBS,IACTC,EAAgBC,OAAAC,EAAA,EAAAD,CAAIJ,GACjBM,OAAO,SAAAhB,GAAI,OAAIA,EAAKG,aAGrBO,EAAMO,OAAS,EAEf7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KACE9B,EAAAC,EAAAC,cAAA,WAASC,UAAU,OAAO4B,MAAO,CAAEC,QAAS,UAC1ChC,EAAAC,EAAAC,cAAA,SACEc,KAAK,WACLC,GAAG,aACHd,UAAU,aACVE,SAAUkB,IAEZvB,EAAAC,EAAAC,cAAA,SAAOiB,QAAQ,cAAf,wBACAnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXsB,EAAcQ,IAAI,SAAArB,GAAI,OACrBZ,EAAAC,EAAAC,cAACgC,EAAD,CACEtB,KAAMA,EACNuB,IAAKvB,EAAKK,GACVJ,UAAWA,EACXC,UAAWA,SASlB,IC1BMsB,MAtBf,SAAAzB,GAA6C,IAAzBW,EAAyBX,EAAzBW,MAAOe,EAAkB1B,EAAlB0B,eACzB,OAAIf,EAAMgB,KAAK,SAAA1B,GAAI,OAAIA,EAAKG,YAExBf,EAAAC,EAAAC,cAAA,UACEc,KAAK,SACLI,QAASiB,EACTlC,UAAU,kBACV4B,MAAO,CAAEC,QAAS,UAJpB,mBAWG,ICwBMO,MArCf,SAAA5B,GAA+D,IAAvCW,EAAuCX,EAAvCW,MAAOkB,EAAgC7B,EAAhC6B,aAAcH,EAAkB1B,EAAlB0B,eAC3C,OAAIf,EAAMO,OAAS,EAEf7B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS4B,MAAO,CAAEC,QAAS,UAC3ChC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACbmB,EAAMM,OAAO,SAAAhB,GAAI,OAAKA,EAAKG,YAAWc,OACvC7B,EAAAC,EAAAC,cAAA,4BAGFF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGkB,QAASoB,EAAcC,KAAK,KAAKtC,UAAU,YAA9C,QAGFH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGkB,QAASoB,EAAcC,KAAK,YAA/B,WAGFzC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGkB,QAASoB,EAAcC,KAAK,eAA/B,eAIJzC,EAAAC,EAAAC,cAACwC,EAAD,CAAUpB,MAAOA,EAAOe,eAAgBA,KAKvC,2jBC8FMM,cAxHb,SAAAA,EAAY7C,GAAO,IAAAR,EAAA,OAAAoC,OAAAkB,EAAA,EAAAlB,CAAApB,KAAAqC,IACjBrD,EAAAoC,OAAAmB,EAAA,EAAAnB,CAAApB,KAAAoB,OAAAoB,EAAA,EAAApB,CAAAiB,GAAAI,KAAAzC,KAAMR,KASRC,YAAc,SAACiD,GACb1D,EAAKC,SAAS,SAAA0D,GAAS,MAAK,CAC1BhC,GAAIgC,EAAUhC,GAAK,EACnBiC,MAAK,CACH,CACEjC,GAAIgC,EAAUhC,GACd9B,MAAO6D,EACPjC,WAAW,IAJVoC,OAAAzB,OAAAC,EAAA,EAAAD,CAMAuB,EAAUC,YAnBA5D,EAwBnBuB,UAAY,SAACxB,GACX,IAAM+D,GAAa/D,EAAMG,OAAOyB,GAEhC3B,EAAKC,SAAS,SAAA0D,GAAS,OAAAI,EAAA,GAClBJ,EADkB,CAErBC,MAAOD,EAAUC,MAAMjB,IAAI,SAACrB,GAC1B,OAAIwC,IAAcxC,EAAKK,IAAML,EAAKG,UAChCsC,EAAA,GAAYzC,EAAZ,CAAkBG,WAAW,IAG3BqC,IAAcxC,EAAKK,IAAOL,EAAKG,UAI5BH,EAHLyC,EAAA,GAAYzC,EAAZ,CAAkBG,WAAW,WAnClBzB,EA2CnBiC,UAAY,WACVjC,EAAKC,SAAS,SAAA0D,GAAS,OAAAI,EAAA,GAClBJ,EADkB,CAErBC,MAAOD,EAAUC,MAAMjB,IAAI,SAACrB,GAC1B,OAAIqC,EAAUC,MAAMI,MAAM,SAAAN,GAAI,OAAIA,EAAKjC,YACrCsC,EAAA,GAAYzC,EAAZ,CAAkBG,WAAW,IAG/BsC,EAAA,GAAYzC,EAAZ,CAAkBG,WAAW,WAnDhBzB,EAwDnBkD,aAAe,SAACnD,GACdkE,SAASC,cAAc,sBAAsBrD,UAAY,GACzD,IAAMsD,EAAMpE,EAAMG,OACZkE,EAAUD,EAAIE,UAEJ,QAAZD,GACFD,EAAItD,UAAY,WAChBb,EAAKC,SAAS,CACZiC,YAAa,SAEM,WAAZkC,GACTD,EAAItD,UAAY,WAChBb,EAAKC,SAAS,CACZiC,YAAa,YAEM,cAAZkC,IACTD,EAAItD,UAAY,WAChBb,EAAKC,SAAS,CACZiC,YAAa,gBA1EAlC,EA+EnBwB,UAAY,SAACzB,GACX,IAAM+D,GAAa/D,EAAMG,OAAOyB,GAEhC3B,EAAKC,SAAS,SAAA0D,GAAS,OAAAI,EAAA,GAClBJ,EADkB,CAErBC,MAAOxB,OAAAC,EAAA,EAAAD,CAAIuB,EAAUC,OAAOtB,OAAO,SAAAhB,GAAI,OAAIA,EAAKK,KAAOmC,SApFxC9D,EAwFnB+C,eAAiB,WACf/C,EAAKC,SAAS,SAAA0D,GAAS,OAAAI,EAAA,GAClBJ,EADkB,CAErBC,MAAOxB,OAAAC,EAAA,EAAAD,CAAIuB,EAAUC,OAAOtB,OAAO,SAAAhB,GAAI,OAAKA,EAAKG,iBAxFnDzB,EAAKJ,MAAQ,CACXgE,MAAO,GACPjC,GAAI,EACJO,YAAa,OANElC,wEAgGjB,OACEU,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAC0D,EAAD,CACE7D,YAAaO,KAAKP,cAGpBC,EAAAC,EAAAC,cAAC2D,EAAD,CACEvC,MAAOhB,KAAKpB,MAAMgE,MAClBrC,UAAWP,KAAKO,UAChBU,UAAWjB,KAAKiB,UAChBC,YAAalB,KAAKpB,MAAMsC,YACxBV,UAAWR,KAAKQ,YAGlBd,EAAAC,EAAAC,cAAC4D,EAAD,CACExC,MAAOhB,KAAKpB,MAAMgE,MAClBV,aAAclC,KAAKkC,aACnBH,eAAgB/B,KAAK+B,yBAlHT7B,IAAMC,WCIbsD,MANf,WACE,OACE/D,EAAAC,EAAAC,cAAC8D,EAAD,OCCJC,IAASC,OACPlE,EAAAC,EAAAC,cAACiE,EAAD,MACAZ,SAASa,eAAe","file":"static/js/main.a3a7085a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoInput extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  addTodo = (e) => {\n    if (e.which === 13 || e.keyCode === 13) {\n      if (this.state.title !== '') {\n        this.props.addTodoItem(this.state.title);\n        this.setState({\n          title: '',\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleTitleChange}\n          onKeyPress={this.addTodo}\n          value={this.state.title}\n        />\n      </header>\n    );\n  }\n}\n\nTodoInput.propTypes = {\n  addTodoItem: PropTypes.func.isRequired,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItem({ item, toggleOne, clearItem }) {\n  return (\n    <li className={item.completed ? 'completed' : ''}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={item.id}\n          onChange={toggleOne}\n          checked={item.completed}\n        />\n        <label htmlFor=\"todo-1\">{item.title}</label>\n        <button\n          type=\"button\"\n          id={item.id}\n          onClick={clearItem}\n          className=\"destroy\"\n        />\n      </div>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  toggleOne: PropTypes.func.isRequired,\n  clearItem: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nfunction TodoList(\n  {\n    items,\n    toggleOne,\n    toggleAll,\n    selectedTab,\n    clearItem,\n  }\n) {\n  let filteredItems = [];\n\n  if (selectedTab === 'All') {\n    filteredItems = [...items];\n  } else if (selectedTab === 'Active') {\n    filteredItems = [...items]\n      .filter(item => !item.completed);\n  } else if (selectedTab === 'Completed') {\n    filteredItems = [...items]\n      .filter(item => item.completed);\n  }\n\n  if (items.length > 0) {\n    return (\n      <>\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ul className=\"todo-list\">\n            {filteredItems.map(item => (\n              <TodoItem\n                item={item}\n                key={item.id}\n                toggleOne={toggleOne}\n                clearItem={clearItem}\n              />\n            ))}\n          </ul>\n        </section>\n      </>\n    );\n  }\n\n  return '';\n}\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleOne: PropTypes.func.isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  clearItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ClearBtn({ items, clearCompleted }) {\n  if (items.some(item => item.completed)) {\n    return (\n      <button\n        type=\"button\"\n        onClick={clearCompleted}\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n      >\n        Clear completed\n      </button>\n    );\n  }\n\n  return '';\n}\n\nClearBtn.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default ClearBtn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClearBtn from './ClearBtn';\n\nfunction ControlPanel({ items, handleFilter, clearCompleted }) {\n  if (items.length > 0) {\n    return (\n      <footer className=\"footer\" style={{ display: 'block' }}>\n        <span className=\"todo-count\">\n          {items.filter(item => !item.completed).length}\n          <span> items left</span>\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a onClick={handleFilter} href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a onClick={handleFilter} href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a onClick={handleFilter} href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <ClearBtn items={items} clearCompleted={clearCompleted} />\n      </footer>\n    );\n  }\n\n  return '';\n}\n\nControlPanel.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import React from 'react';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\nimport ControlPanel from './ControlPanel';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      id: 1,\n      selectedTab: 'All',\n    };\n  }\n\n  addTodoItem = (todo) => {\n    this.setState(prevState => ({\n      id: prevState.id + 1,\n      todos: [\n        {\n          id: prevState.id,\n          title: todo,\n          completed: false,\n        },\n        ...prevState.todos,\n      ],\n    }));\n  }\n\n  toggleOne = (event) => {\n    const eTargetId = +event.target.id;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.map((item) => {\n        if (eTargetId === item.id && item.completed) {\n          return { ...item, completed: false };\n        }\n\n        if (eTargetId === item.id && !item.completed) {\n          return { ...item, completed: true };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.map((item) => {\n        if (prevState.todos.every(todo => todo.completed)) {\n          return { ...item, completed: false };\n        }\n\n        return { ...item, completed: true };\n      }),\n    }));\n  }\n\n  handleFilter = (event) => {\n    document.querySelector('.filters .selected').className = '';\n    const tab = event.target;\n    const tabName = tab.innerText;\n\n    if (tabName === 'All') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'All',\n      });\n    } else if (tabName === 'Active') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'Active',\n      });\n    } else if (tabName === 'Completed') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'Completed',\n      });\n    }\n  }\n\n  clearItem = (event) => {\n    const eTargetId = +event.target.id;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todos: [...prevState.todos].filter(item => item.id !== eTargetId),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: [...prevState.todos].filter(item => !item.completed),\n    }));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <TodoInput\n          addTodoItem={this.addTodoItem}\n        />\n\n        <TodoList\n          items={this.state.todos}\n          toggleOne={this.toggleOne}\n          toggleAll={this.toggleAll}\n          selectedTab={this.state.selectedTab}\n          clearItem={this.clearItem}\n        />\n\n        <ControlPanel\n          items={this.state.todos}\n          handleFilter={this.handleFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}