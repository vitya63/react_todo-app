{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/ClearBtn.js","components/ControlPanel.js","components/TodoList.js","App.js","index.js"],"names":["TodoApp","_ref","handleSubmit","handleTitleChange","value","react_default","a","createElement","className","placeholder","onChange","onKeyPress","TodoItem","item","toggleOne","clearItem","type","id","checked","completed","htmlFor","title","onClick","ClearBtn","items","clearCompleted","some","style","display","ControlPanel","handleFilter","length","href","components_ClearBtn","TodoList","toggleAll","selectedTab","filteredItems","Object","toConsumableArray","filter","Fragment","map","components_TodoItem","key","components_ControlPanel","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","which","keyCode","state","setState","prevState","_objectSpread","todos","concat","target","eTargetId","every","todo","document","querySelector","tab","tabName","innerText","TodoInput","components_TodoList","React","Component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.4574cf7d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoApp({ handleSubmit, handleTitleChange, value }) {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleTitleChange}\n        onKeyPress={handleSubmit}\n        value={value}\n      />\n    </header>\n  );\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItem({ item, toggleOne, clearItem }) {\n  return (\n    <li className=\"\">\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={item.id}\n          onChange={toggleOne}\n          checked={item.completed}\n        />\n        <label htmlFor=\"todo-1\">{item.title}</label>\n        <button\n          type=\"button\"\n          id={item.id}\n          onClick={clearItem}\n          className=\"destroy\"\n        />\n      </div>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  toggleOne: PropTypes.func.isRequired,\n  clearItem: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ClearBtn({ items, clearCompleted }) {\n  if (items.some(item => item.completed)) {\n    return (\n      <button\n        type=\"button\"\n        onClick={clearCompleted}\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n      >\n        Clear completed\n      </button>\n    );\n  }\n\n  return '';\n}\n\nClearBtn.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default ClearBtn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClearBtn from './ClearBtn';\n\nfunction ControlPanel({ items, handleFilter, clearCompleted }) {\n  if (items.length > 0) {\n    return (\n      <footer className=\"footer\" style={{ display: 'block' }}>\n        <span className=\"todo-count\">\n          {items.length}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a onClick={handleFilter} href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a onClick={handleFilter} href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a onClick={handleFilter} href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <ClearBtn items={items} clearCompleted={clearCompleted} />\n      </footer>\n    );\n  }\n\n  return '';\n}\n\nControlPanel.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport ControlPanel from './ControlPanel';\n\nfunction TodoList(\n  {\n    items,\n    toggleOne,\n    toggleAll,\n    handleFilter,\n    selectedTab,\n    clearItem,\n    clearCompleted,\n  }\n) {\n  let filteredItems = [];\n\n  if (selectedTab === 'All') {\n    filteredItems = [...items];\n  } else if (selectedTab === 'Active') {\n    filteredItems = [...items]\n      .filter(item => !item.completed);\n  } else if (selectedTab === 'Completed') {\n    filteredItems = [...items]\n      .filter(item => item.completed);\n  }\n\n  if (items.length > 0) {\n    return (\n      <>\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ul className=\"todo-list\">\n            {filteredItems.map(item => (\n              <TodoItem\n                item={item}\n                key={item.id}\n                toggleOne={toggleOne}\n                clearItem={clearItem}\n              />\n            ))}\n          </ul>\n        </section>\n        <ControlPanel\n          items={items}\n          handleFilter={handleFilter}\n          clearCompleted={clearCompleted}\n        />\n      </>\n    );\n  }\n\n  return '';\n}\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleOne: PropTypes.func.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  clearItem: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      id: 1,\n      title: '',\n      selectedTab: 'All',\n    };\n  }\n\n  handleSubmit = (event) => {\n    if (event.which === 13 || event.keyCode === 13) {\n      if (this.state.title !== '') {\n        this.setState(prevState => ({\n          ...prevState,\n          id: prevState.id + 1,\n          todos: [\n            {\n              id: prevState.id,\n              title: prevState.title,\n              completed: false,\n            },\n            ...prevState.todos,\n          ],\n          title: '',\n        }));\n      }\n    }\n  }\n\n  handleTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  toggleOne = (event) => {\n    const eTargetId = +event.target.id;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.map((item) => {\n        if (eTargetId === item.id && item.completed) {\n          return { ...item, completed: false };\n        }\n\n        if (eTargetId === item.id && !item.completed) {\n          return { ...item, completed: true };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.map((item) => {\n        if (prevState.todos.every(todo => todo.completed)) {\n          return { ...item, completed: false };\n        }\n\n        return { ...item, completed: true };\n      }),\n    }));\n  }\n\n  handleFilter = (event) => {\n    document.querySelector('.filters .selected').className = '';\n    const tab = event.target;\n    const tabName = tab.innerText;\n\n    if (tabName === 'All') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'All',\n      });\n    } else if (tabName === 'Active') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'Active',\n      });\n    } else if (tabName === 'Completed') {\n      tab.className = 'selected';\n      this.setState({\n        selectedTab: 'Completed',\n      });\n    }\n  }\n\n  clearItem = (event) => {\n    const eTargetId = +event.target.id;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todos: [...prevState.todos].filter(item => item.id !== eTargetId),\n    }));\n  }\n\n  clearCompleted = (event) => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: [...prevState.todos].filter(item => !item.completed),\n    }));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <TodoInput\n          handleSubmit={this.handleSubmit}\n          handleTitleChange={this.handleTitleChange}\n          value={this.state.title}\n        />\n        <TodoList\n          items={this.state.todos}\n          toggleOne={this.toggleOne}\n          toggleAll={this.toggleAll}\n          handleFilter={this.handleFilter}\n          selectedTab={this.state.selectedTab}\n          clearItem={this.clearItem}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}